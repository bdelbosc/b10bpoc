---
# Ensure instance is clean
- name: Init nuxeorunning
  set_fact:
    nuxeorunning: false

- name: Check for nuxeoctl wrapper
  stat: path=/usr/bin/nuxeoctl
  register: nuxeoctl

- name: Check for nuxeoctl wrapper
  shell: nuxeoctl status | grep "Server is running"
  register: nuxeorunningstatus
  failed_when: False
  when: nuxeoctl.stat.exists

- name: Flag nuxeo as running
  set_fact:
    nuxeorunning: true
  when: nuxeorunningstatus is defined and nuxeorunningstatus.output != ""



- name: Upload distribution and settings
  synchronize:
    src: ../deploy
    dest: /
    delete: yes
    checksum: yes

# disk
- name: Check if /mnt volume is mounted
  shell: cat /proc/mounts | grep /dev/xvdb | grep /mnt
  changed_when: False
  failed_when: False
  register: mntmounted

- name: Umount /mnt
  shell: umount /mnt
  when: mntmounted.stdout != ""

# ssd1
- name: Check if /ssd1 volume is mounted
  shell: cat /proc/mounts | grep /dev/xvdb | grep ssd1
  changed_when: False
  failed_when: False
  register: mounted

- name: Format /ssd1 volume
  shell: mkfs.ext4 /dev/xvdb
  when: mounted.stdout == ""

- name: Mount /ssd1
  mount: name=/ssd1 fstype=ext4 src=/dev/xvdb opts=noatime,nodiratime state=mounted
  when: mounted.stdout == ""

- name: Create /opt
  file: path=/ssd1/opt state=directory

- name: Link opt
  file: path=/opt
        src=/ssd1/opt
        state=link
        force=yes

# ssd2
- name: Check if ssd2 volume is mounted
  shell: cat /proc/mounts | grep /dev/xvdc | grep ssd2
  changed_when: False
  failed_when: False
  register: mounted

- name: Format ssd2 volume
  shell: mkfs.ext4 /dev/xvdc
  when: mounted.stdout == ""

- name: Mount /ssd2
  mount: name=/ssd2 fstype=ext4 src=/dev/xvdc opts=noatime,nodiratime state=mounted
  when: mounted.stdout == ""

# Extract distribution and setup dirs
- name: nuxeo user
  user:
    name: nuxeo
    shell: /bin/bash
    home: /opt/nuxeo
    createhome: yes
    state: present

- name: stat nuxeo
  stat: path=/opt/nuxeo/server
  register: nuxeoserver
- name: Create temporary dir for unzip
  file: path=/opt/nuxeo/ansible_tmp state=directory owner=nuxeo group=nuxeo
  when: not nuxeoserver.stat.exists
- name: Unzip distribution
  shell: unzip -q -d /opt/nuxeo/ansible_tmp /deploy/nuxeo-distribution.zip
  become_user: nuxeo
  when: not nuxeoserver.stat.exists
- name: Find out distribution directory
  shell: ls /opt/nuxeo/ansible_tmp/
  register: distrib_dir
  when: not nuxeoserver.stat.exists
- name: Move distribution to final location
  shell: mv /opt/nuxeo/ansible_tmp/{{distrib_dir.stdout}} /opt/nuxeo/server
  become_user: nuxeo
  when: not nuxeoserver.stat.exists
- name: Remove temporary dir
  file: path=/opt/nuxeo/ansible_tmp state=absent
- name: Check for JDBC libs
  stat: path=/deploy/jdbc-libs
  register: jdbclibs
- name: Install JDBC libs
  shell: cp /deploy/jdbc-libs/* /opt/nuxeo/server/lib/
  become_user: nuxeo
  when: jdbclibs.stat.exists
- name: Create config dir
  file: path=/opt/nuxeo/conf state=directory owner=nuxeo group=nuxeo mode=0755
- name: Create data dir
  file: path=/ssd2/nuxeo-data state=directory owner=nuxeo group=nuxeo mode=0755
- name: Create log dir
  file: path=/opt/nuxeo/logs state=directory owner=nuxeo group=nuxeo mode=0755
- name: Create tmp dir
  file: path=/opt/nuxeo/tmp state=directory owner=nuxeo group=nuxeo mode=0755
- name: Move config file
  shell: mv /opt/nuxeo/server/bin/nuxeo.conf /opt/nuxeo/conf/nuxeo.conf || /bin/true
  become_user: nuxeo
  when: not nuxeoserver.stat.exists
- name: Make nuxeoctl executable
  file: path=/opt/nuxeo/server/bin/nuxeoctl mode=0755
- name: Check for instance.clid
  stat: path=/deploy/instance.clid
  register: instanceclid
- name: Install instance.clid
  shell: cp /deploy/instance.clid /ssd2/nuxeo-data/
  when: instanceclid.stat.exists

# Add fixed paths
- name: Config - nuxeo.data.dir
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: '^#?nuxeo\.data\.dir\s*='
    line: "nuxeo.data.dir=/ssd2/nuxeo-data"
- name: Config - nuxeo.tmp.dir
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: '^#?nuxeo\.tmp\.dir\s*='
    line: "nuxeo.tmp.dir=/opt/nuxeo/tmp"
- name: Config - nuxeo.log.dir
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: '^#?nuxeo\.log\.dir\s*='
    line: "nuxeo.log.dir=/opt/nuxeo/logs"
# Add database config
- name: Config - templates
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: '^#?nuxeo\.templates\s*='
    line: "nuxeo.templates=default,mongodb,perf"
# Add mongodb config
- name: Config - nuxeo.mongodb.server
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: '^#?nuxeo\.mongodb\.server\s*='
    line: "nuxeo.mongodb.server=127.0.0.1"
#    line: "nuxeo.mongodb.server={{mongodb_hosts[0]}}"
- name: Config - nuxeo.mongodb.dbname
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: '^#?nuxeo\.mongodb\.dbname\s*='
    line: "nuxeo.mongodb.dbname=bench"
# Add nuxeoctl wrapper
- name: nuxeoctl wrapper
  copy: src=nuxeoctl dest=/usr/bin/nuxeoctl mode=0755
# wizard
- name: Config - nuxeo.wizard.done
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: '^#?nuxeo\.wizard\.done\s*='
    line: "nuxeo.wizard.done=true"
# Java heap size (about 80% of total memory)
- name: Calculate heap size
  shell: echo $(( $(grep MemTotal /proc/meminfo | awk '{print $2}') / 128 / 10 ))
  register: heapsize
- name: Config - heap size
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: 'JAVA_OPTS\s*=(.*)-Xms[^m]+m(.*)-Xmx[^m]+m(.*)'
    line: 'JAVA_OPTS=\1-Xms{{heapsize.stdout.strip()}}m\2-Xmx{{heapsize.stdout.strip()}}m\3'
    backrefs: yes
- name: Config - enable flight recorder
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: '^#?JAVA_OPTS\s*(.*)FlightRecorder'
    line: "JAVA_OPTS=$JAVA_OPTS -Dcom.sun.management.jmxremote.autodiscovery=true -Dcom.sun.management.jdp.name=Nuxeo -XX:+UnlockCommercialFeatures -XX:+FlightRecorder"

# tuning
- name: Config - low softref
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: '^#?JAVA_OPTS\s*(.*)SoftRefLRUPolicyMSPerMB'
    line: "JAVA_OPTS=$JAVA_OPTS -XX:SoftRefLRUPolicyMSPerMB=1"
- name: Config - Disable fulltext
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: '^#?nuxeo.vcs.fulltext.disabled\s*(.*)'
    line: "nuxeo.vcs.fulltext.disabled=true"
- name: Config - Disable elastic
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: '^#?elasticsearch.enabled\s*(.*)'
    line: "elasticsearch.enabled=false"
- name: Config - Disable elastic audit
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: '^#?audit.elasticsearch.enabled=\s*(.*)'
    line: "audit.elasticsearch.enabled=false"


# Add distribution packages
- name: Add distribution packages
  shell: nuxeoctl mp-init
  when: not nuxeorunning

# Add custom bundles
- name: Check for custom bundles
  stat: path=/deploy/bundles
  register: custombundles
- name: Copy custom bundles
  shell: cp -a /deploy/bundles/* /opt/nuxeo/server/nxserver/bundles/
  when: custombundles.stat.exists
  failed_when: False

# Add custom templates
- name: Check for custom templates
  stat: path=/deploy/templates
  register: customtpl
- name: List custom templates
  command: ls -1 /deploy/templates
  when: customtpl.stat.exists
  register: tpllist
- name: Copy custom templates
  shell: cp -a /deploy/templates/{{item}} /opt/nuxeo/server/templates/
  with_items: tpllist.stdout.strip().split('\n')
  when: customtpl.stat.exists and tpllist.stdout.strip() != ''
- name: Add custom templaets to nuxeo.conf
  lineinfile:
    dest: /opt/nuxeo/conf/nuxeo.conf
    regexp: 'nuxeo\.templates\s*=(.*)'
    line: 'nuxeo.templates=\1,{{item}}'
    backrefs: yes
  with_items: tpllist.stdout.strip().split('\n')
  when: customtpl.stat.exists and tpllist.stdout.strip() != ''

# Add custom packages
- name: Check for custom packages to add
  stat: path=/deploy/mp-add
  register: custompkg
- name: List custom packages
  command: ls -1 /deploy/mp-add
  register: pkgaddlist
  when: custompkg.stat.exists
- name: Add custom packages
  command: nuxeoctl mp-add /deploy/mp-add/{{item}}
  with_items: pkgaddlist.stdout.strip().split('\n')
  when: custompkg.stat.exists and pkgaddlist.stdout.strip() != ''

# Install custom packages list
- name: Check for custom packages to install
  stat: path=/deploy/mp-list
  register: installpkg
- name: Install custom packages
  shell: nuxeoctl --accept=true --relax=false mp-install $(cat /deploy/mp-list | tr '\n' ' ')
  when: installpkg.stat.exists and not nuxeorunning

# Add custom config
- name: Check for custom configuration
  stat: path=/deploy/conf
  register: customconf
- name: Install custom configuration
  shell: cat /deploy/conf >> /opt/nuxeo/conf/nuxeo.conf
  when: customconf.stat.exists

