---
- name: Set facts
  set_fact:
    nbBlobsPerThread: "{{ (impnbBlobs/counts.nuxeo/impnbThreads)|int}}"
    mqSize: "{{ (counts.nuxeo*impnbThreads)|int }}"
    nbDocumentsPerThread: "{{ (impnbNodes/(counts.nuxeo * counts.nuxeo * impnbThreads))|int }}"
    mqueuesBatchThresholdS: "45"
    totalBlobs: "{{ (counts.nuxeo*impnbThreads*(impnbBlobs/counts.nuxeo/impnbThreads))|int }}"
    totalDocs: "{{ (counts.nuxeo*counts.nuxeo*impnbThreads*(impnbNodes/(counts.nuxeo * counts.nuxeo * impnbThreads)))|int }}"
    mqPrefix: "nx-imp4-"
  tags:
  - continue

- name: Step 1 - Notify graphite
  run_once: true
  shell: 'curl -XPOST http://monitor1:8080/events/  -d ''{"what": "Step 1 - Generating blobs", "tags":"phases import", "data": "nbNuxeo={{counts.nuxeo}} nbThreads={{impnbThreads}} nbBlobsPerThread={{nbBlobsPerThread}}"}'''
- name: Step 1 - Generating blobs
  shell: 'curl $(sleep $(echo $RANDOM % 10 |bc)) -X POST ''http://localhost:8080/nuxeo/site/automation/MQImporter.runRandomBlobProducers'' -u Administrator:Administrator -H ''content-type: application/json+nxrequest''  -d ''{"params":{"nbBlobs": {{nbBlobsPerThread}}, "nbThreads": {{impnbThreads}}, "avgBlobSizeKB": {{impBlobsSizeKB}}, "mqName": "{{mqPrefix}}blobs", "mqSize": {{mqSize}}, "kafkaConfig": "default"} }'''

- name: Step 2 - Notify graphite
  run_once: true
  shell: 'curl -XPOST http://monitor1:8080/events/  -d ''{"what": "Step 2 - Importing blobs", "tags":"phases import", "data": "totalBlobs={{totalBlobs}} "}'''
- name: Step 2 - Uploading blobs into binarystore
  shell: 'curl $(sleep $(echo $RANDOM % 10 |bc)) -X POST ''http://localhost:8080/nuxeo/site/automation/MQImporter.runBlobConsumers'' -u Administrator:Administrator -H ''content-type: application/json+nxrequest'' -d ''{"params":{"blobProviderName": "default", "nbThreads": {{impnbThreads}}, "mqBlobInfo": "{{mqPrefix}}blobs-info", "mqName": "{{mqPrefix}}blobs", "kafkaConfig": "default"}}'''

- name: Step 3 - Notify graphite
  run_once: true
  shell: 'curl -XPOST http://monitor1:8080/events/  -d ''{"what": "Step 3 - Generating documents", "tags":"phases import", "data": "nbNuxeo={{counts.nuxeo}} nbThreads={{mqSize}} nbDocsPerThread={{nbDocumentsPerThread}}"}'''
- name: Step 3 - Generating documents
  shell: 'curl $(sleep $(echo $RANDOM % 10 |bc)) -X POST ''http://localhost:8080/nuxeo/site/automation/MQImporter.runRandomDocumentProducers'' -u Administrator:Administrator -H ''content-type: application/json+nxrequest'' -d ''{"params":{"nbDocuments": {{nbDocumentsPerThread}}, "nbThreads": {{mqSize}}, "mqBlobInfo": "{{mqPrefix}}blobs-info", "mqName": "{{mqPrefix}}documents", "mqSize": {{mqSize}}, "kafkaConfig": "default" }}'''

- name: Step 4 - Notify graphite
  run_once: true
  shell: 'curl -XPOST http://monitor1:8080/events/  -d ''{"what": "Step 4 - Importing documents", "tags":"phases import", "data": "totalDocs={{totalDocs}}Â nbNuxeo={{counts.nuxeo}} nbThreads={{impnbThreads}} batchSize={{impbatchSize}}"}'''
  tags:
  - continue
- name: Step 4 - Importing documents
  shell: 'curl -X POST ''http://localhost:8080/nuxeo/site/automation/MQImporter.runDocumentConsumers'' -u Administrator:Administrator -H ''content-type: application/json+nxrequest'' -d ''{"params":{"rootFolder": "/default-domain/workspaces", "nbThreads": {{impnbThreads}}, "mqName": "{{mqPrefix}}documents", "kafkaConfig": "default", "batchThresholdS": "{{mqueuesBatchThresholdS}}", "batchSize": {{impbatchSize}}}}'''
  tags:
  - continue

- name: End - Notify graphite
  run_once: true
  shell: 'curl -XPOST http://monitor1:8080/events/  -d ''{"what": "Import Completed", "tags":"phases import", "data": "End"}'''
